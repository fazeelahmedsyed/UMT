swirl()
size_gb <- size_mb/2^10
View(cran2)
View(cran3)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
View(cran3)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, "package")
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(by_package, mean(size))
submit()
by_package
View(by_package)
View(by_package)
?n_distinct()
submit()
sumbit
submit
submit()
submit()
quit()
quit()
?connections
quit()
setwd("~/Coursera")
dir()
?formatC()
setwd("C:\Users\Dell\Documents\ISLR")
setwd("C://Users//Dell//Documents//ISLR")
getwd()
setwd("~/Coursera")
setwd("~/Documents")
setwd("C://Users//Dell//Documents")
mkdir("UMT")
?mkdir()
Library(MASS)
install.packages("MASS")
#This function is for Classification Methods LR,LDA,QDA and KNN.
#Loading Libraries
library(ISLR)
#Preparing Dataset
Smarket <- Smarket
a <- c("The year that the observation was recorded","Percentage return for previous day","Percentage return for 2 days previous","Percentage return for 3 days previous","Percentage return for 4 days previous","Percentage return for 5 days previous","Volume of shares traded (number of daily shares traded in billions)","Percentage return for today","A factor with levels Down and Up indicating whether the market had a positive or negative return on a given day")
Smarket_desc <- data.frame(cbind(colnames(Smarket),a))
colnames(Smarket_desc) <- c("variable","Variable Description")
rm(a)
#Creating Correlation matrix and identifying highly correlated variables
Smarket_cor <- cor(Smarket[,-9])
sort(Smarket_cor, decreasing = T)
which(Smarket_cor > 0.5 & Smarket_cor < 1, arr.ind = T)
colnames(Smarket_cor)[c(1,7)]
#Observing the highly correlated variables
plot(Smarket$Volume, col = "dark grey", pch = 4)
print("Volume appears to increase with time")
#Running Logistic Regression on the Dataset
glm.fit <- glm(Direction ~. -Year -Today, data = Smarket, family = binomial)
summary(glm.fit)
summary(glm.fit)$coefs
summary(glm.fit)$coef
names(summary(glm.fit))
summary(glm.fit)$coefficients
summary(glm.fit)$contrasts
contrasts(summary(glm.fit))
summary(glm.fit)
summary(glm.fit)$coefficients[,4]
summary(glm.fit)$coefficients[4,]
summary(glm.fit)$coefficients
contrasts(Direction)
contrasts(Smarket$Direction)
attach(Smarket)
?predict()
glm.fit_probs <- predict(glm.fit, type = "response")
glm.fit_probs[1:10]
predict(glm.fit)[1:10]
.rs.restartR()
library(MASS)
search()
.rs.restartR()
search()
q()
getwd()
?read.csv
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt)
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt")
y
dim(y)
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt", sep = "", header = F)
dim(y)
y[1:10]
y[1:10,]
str(y)
y <- as.factor(y)
y[,1] <- as.factor(y[,1])
str(y)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt")
X[1:5,1:5]
dim(X)
X[1:5,1
]
X[1,1]
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt", sep = "")
X[1,1]
head(X)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt", sep = "", header = F)
dim(X)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/subject_test.txt", sep = "", header = F)
dim(X)
?read.table
?data.table
>read.table
read.table
?read.table
args(read.table)
library(ISLR)
Smarket <- Smarket
a <- c("The year that the observation was recorded","Percentage return for previous day","Percentage return for 2 days previous","Percentage return for 3 days previous","Percentage return for 4 days previous","Percentage return for 5 days previous","Volume of shares traded (number of daily shares traded in billions)","Percentage return for today","A factor with levels Down and Up indicating whether the market had a positive or negative return on a given day")
Smarket_desc <- data.frame(cbind(colnames(Smarket),a))
colnames(Smarket_desc) <- c("variable","Variable Description")
rm(a)
Smarket_cor <- cor(Smarket[,-9])
attach(Smarket)
glm.fit <- glm(Direction ~. -Year -Today, data = Smarket, family = binomial)
summary(glm.fit)
glm.fit <- glm(Direction ~ Lag1 + Lag2, data = Smarket, family = binomial)
summary(glm.fit)
glm.fit <- glm(Direction ~ Lag1, data = Smarket, family = binomial)
summary(glm.fit)
kk <- c(140, 160, 145, 155, 160, 165, 140, 135, 138, 162)
sum(kk)
length(kk)
150
k1 <- kk
rm(kk)
k2 <- c(142, 161, 149, 156, 160, 165, 145, 137, 139, 161)
sum(k2)
151.5-150
k3 <- c(148, 152, 151, 149, 151, 153, 149, 147, 149, 151)
sum(k3)
k4 <- c(150, 153, 151, 148, 152, 152, 153, 151, 149, 150)
k <- as.list(k1,k2,k3,k4)
k
?list
k <- list(k1,k2,k3,k4)
k
var <- data.frame
var <- data.frame(NULL)
var <- numeric()
var <- numeric()
for (i in 1:4){
var[i] = sum(k[[i]])/length(k[[i]])
}
var
variance <- sum(var)/4
variance
variance <- sum(var - 150)/4
variance
mean(k1)
library(RCurl)
library(RCurl)
getURL("http://stats.grok.se/json/en/201410/Friday")
rawData <- getURL("http://stats.grok.se/json/en/201410/Friday")
rawdata
rawData
str(rawData)
install.packages("RJSONIO")  # Install the JSON parser
library(RJSONIO)  # Load the JSON parser
fromJSON(rawData)
parsed <- fromJSON(rawData)
str(parsed)
parsed$daily_views
names(parsedData$daily_views)
parsedData$daily_views
parsedData <- fromJSON(rawData)
parsedData$daily_views
names(parsedData$daily_views)
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views)  # get the data points
parsedData$daily_views
names(parsedData$daily_views)
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views)  # get the data points
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)  # tell R to stop using the dates as names
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
str(viewsData)
viewsData$Date <- as.Date(viewsData$Date)
str(viewsData)
order(viewsData$Date)
viewsData[order(viewsData$Date),]
viewsData <- viewsData[order(viewsData$Date),]
install.packages("ggplot2")
library(ggplot2)
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
getURL("http://stats.grok.se/json/en/201410/Friday")
rawData <- getURL("http://stats.grok.se/json/en/201410/Friday")
rawData
install.packages("RJSONIO")  # Install the JSON parser
library(RJSONIO)  # Load the JSON parser
parsedData <- fromJSON(rawData)
parsedData$daily_views
names(parsedData$daily_views)
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views)  # get the data points
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)  # tell R to stop using the dates as names
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
str(viewsData)
viewsData$Date <- as.Date(viewsData$Date)
viewsData[order(viewsData$Date),]
viewsData <- viewsData[order(viewsData$Date),]
install.packages("ggplot2")
library(ggplot2)
ggplot(data=viewsData,  # Make a plot using our views data
aes(x=Date,  # with Date on the x-axis
y=Views,  # and Views on the y-axis
group=1)) +  # Use all the data as one data series
geom_line()  # and draw a line of this data
library(RCurl)
rawData <- getURL("http://stats.grok.se/json/en/201410/Friday")
rawData
parsedData <- fromJSON(rawData)
parsedData$daily_views
names(parsedData$daily_views)
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views)  # get the data points
data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)  # tell R to stop using the dates as names
viewsData <- data.frame(Date=names(parsedData$daily_views),  # get the names
Views=parsedData$daily_views,  # get the data points
row.names=NULL)   # stop using the dates as names
str(viewsData)
viewsData
list.files()
k <- read.csv("dota2Test.csv")
head(k,10)
k[1:5,1:5]
setwd("~/ISLR")
setwd(~)
setwd(Documents)
setwd(Documents/)
setwd(\)
getwd()
setwd("C:\Users\Dell\Documents")
setwd("C://Users//Dell//Documents")
setwd("~/UMT")
setwd("DataAnalysisUsingR/Assignment-Friday Analysis")
setwd("DataAnalysisUsingR")
dir
dir()
setwd("Assignment - Friday Analysis")
setwd("C://Users//Dell//Documents")
setwd("UMT//DataAnalysisUsingR//Assignment_FridayAnalysis")
library(RJSONIO)
?formatC
kk <- c(2,4,56)
formatC(kk, width = 3)
formatC(kk, width = 3, flag = 0)
formatC(kk, width = 3, flag = -)
formatC(kk, width = 3, flag = "-")
formatC(kk, width = 3, flag = "+")
formatC(kk, width = 3, flag = " ")
formatC(kk, width = 3, flag = "#")
formatC(kk, width = 3, flag = "#", flag = 0)
formatC(kk, width = 3,flag = 0)
formatC(kk, width = 2,flag = 0)
2008:2012
kk <- 2
?paste
ll <- 2012
paste(ll,formatC(kk, width = 2, flag = 0))
paste(ll,formatC(kk, width = 2, flag = 0), sep = NULL)
paste(ll,formatC(kk, width = 2, flag = 0), sep = NA)
paste(ll,formatC(kk, width = 2, flag = 0), sep = "")
paste("osakamuraya",ll,formatC(kk, width = 2, flag = 0), sep = "")
i <- 2008
j <- 1
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, sep = ""),"/Friday")
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
link
rawData <- getURL(link)
search()
library(RCurl)
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
names(parsedData)
parsedData$daily_views
names(parsedData$daily_views)
df <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData
viewsData$Date <- as.Date(viewsData$Date)
viewsData
str(viewsData)
viewsData[order(viewsData$Date),]
viewsData <- viewsData[order(viewsData$Date),]
viewsData
kk <- data.frame(Date = numeric(0), Views = integer(0))
str(KK)
str(kk)
kk$Date <- as.date(kk$Date)
class(kk$Date) <- "Date"
str(kk)
ll <- c(2201212,2)
rbind(kk,ll)
zz <- rbind(kk,ll)
zz
str(zz)
kk <- data.frame(Date = numeric(0), Views = integer(0))
class(kk$Date) <- "Date"
ll <- c(2012-12-08,267)
rbind(kk, ll)
zz <- rbind(kk, ll)
str(zz)
kk <- data.frame(Date = numeric(0), Views = integer(0))
rbind(kk,viewsData)
zz <- rbind(kk,viewsData)
str(kk)
str(kk)
str(zz)
j
i
j <- 2
j
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
str(zz)
zz <- rbind(zz, viewsData)
str(zz)
finalData <- data.frame(Date = numeric(0), Views = integer(0))
for (i in 2008:2012){
for (j in 1:12){
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
finalData <- rbind(finalData, viewsData)
}
}
finalData <- data.frame(Date = numeric(0), Views = integer(0))
for (i in 2008:2012){
for (j in 1:12){
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData$Date <- as.Date(viewsData$Date)
viewsData <- viewsData[order(viewsData$Date),]
finalData <- rbind(finalData, viewsData)
}
}
finalData
url <- "http://stats.grok.se/json/en/200802/Friday"
link <- "http://stats.grok.se/json/en/200802/Friday"
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
parsedData$daily_views
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData
viewsData$Date <- as.Date(viewsData$Date)
viewsData$Date <- as.Date(viewsData$Date)
viewsData
?as.Date
finalData
link <- "http://stats.grok.se/json/en/200804/Friday"
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
parsedData$daily_views
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsDara
viewsData
viewsData$Date <- as.Date(viewsData$Date)
as.Date(viewsData$Date[1])
str(viewsData)
viewsData$Date <- as.Date(viewsData$Date)
link <- "http://stats.grok.se/json/en/200802/Friday"
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData2 <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
str(viewsData2)
viewsData <- viewsData[order(viewsData$Date),]
viewsData
class(viewsData$Date)
class(viewsData2$Date)
str(viewsData)
str(viewsData2)
viewsData$Date <- as.Date(viewsData$Date)
link <- "http://stats.grok.se/json/en/200804/Friday"
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
viewsData$Date <- as.Date(viewsData$Date)
str(viewsData)
viewsData2$Date <- as.Date(viewsData$Date)
str(viewsData2)
viewsData$Date <- as.Date(viewsData$Date)
viewsData2$Date <- as.Date(viewsData$Date)
viewsData$Date <- as.character(viewsData$Date)
viewsData$Date <- as.Date(viewsData$Date)
str(viewsData)
as.numeric(viewsData$Date[1:5])
as.Date("2008-04-31")
as.Date("20080431")
as.Date(20080431)
?as.Date
as.Date("2008-04-31", format = "%Y-%m-%d")
as.Date("2008-04-31", format = "%Y-%M-%D")
as.Date("2008-04-31", format = %Y-%m-%d)
as.Date("2008-04-31", format = '%Y-%m-%d')
as.Date("2008-04-30", format = '%Y-%m-%d')
viewsData
viewsData2
finalData
for (i in 2008:2012){
for (j in 1:12){
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
finalData <- rbind(finalData, viewsData)
}
}
finalData <- data.frame(Date = numeric(0), Views = integer(0))
for (i in 2008:2012){
for (j in 1:12){
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
finalData <- rbind(finalData, viewsData)
}
}
dim(finalData)
head(finalData,10)
kk <- finalData
kk$Date <- as.Date(kk$Date)
kk <- finalData
str(kk)
kk$Date <- as.Date(kk$Date)
str(kk)
?order
order(kk$Date)
kk <- kk[order(kk$Date),]
kk
tail(kk,10)
finalData <- finalData[order(finalData$Date),]
complete.cases(finalData)
tail(complete.cases(finalData))
tail(finalData, 20)
tail(kk,20)
finalData <- data.frame(Date = numeric(0), Views = integer(0))
for (i in 2008:2012){
for (j in 1:12){
link <- paste("http://stats.grok.se/json/en/",i, formatC(j, width = 2, flag = 0),"/Friday", sep = "")
rawData <- getURL(link)
parsedData <- fromJSON(rawData)
viewsData <- data.frame(Date = names(parsedData$daily_views), Views = parsedData$daily_views, row.names = NULL)
finalData <- rbind(finalData, viewsData)
}
}
fd_raw <- finalData
finalData$Date <- as.Date(finalData$Date)
finalData <- finalData[order(finalData$Date),]
tail(finalData)
table(complete.cases(finalData))
finalData <- finalData[complete.cases(finalData),]
summary(finalData)
plot(finalData$Date, finalData$Views)
?format.Date
format.Date(finalData$Date, "%m") == "2011"
table(format.Date(finalData$Date, "%m") == "2011")
table(format.Date(finalData$Date, "%Y") == "2011")
plot(finalData$Date, finalData$Views, col = "dark grey", pch = 4)
plot(finalData$Date, finalData$Views, col = "dark grey", pch = 2)
plot(finalData$Date, finalData$Views, col = "dark grey", pch = 6)
plot(finalData$Date, finalData$Views, col = "dark grey", pch = 8)
plot(finalData$Date, finalData$Views, col = "dark grey")
fd_2011 <- finalData[format.Date(finalData$Date, "%Y") == 2011]
fd_2011 <- finalData[format.Date(finalData$Date, "%Y") == 2011,]
plot(fd_2011$Date, fd_2011$Views, col = "dark grey")
fd_mar11 <- fd2011[format.Date(fd_2011$Date, "%m") == "03"|"04"]
fd_mar11 <- fd_2011[format.Date(fd_2011$Date, "%m") == "03"|"04"]
fd_mar11 <- fd_2011[format.Date(fd_2011$Date, "%m") == "03",]
plot(fd_mar11$Date, fd_mar11$Views, col = 'dark grey')
plot(fd_mar11$Date, fd_mar11$Views, col = 'dark grey', type = 'b')
plot(fd_mar11$Date, fd_mar11$Views, col = 'red', type = 'b', lwd = 3)
plot(fd_mar11$Date, fd_mar11$Views, col = 'red', lwd = 3)
plot(fd_mar11$Date, fd_mar11$Views, col = 'red', type = 'l', lwd = 3)
