list <- list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function (x,...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("Retrieving cached inverse")
return(inv)}
else{
mat <- x$get()
inv <- solve(mat)
x$setinverse(inv)
inv}
}
m <- rbind(c(1,-1/4),c(-1/4,1))
makeCacheMatrix(m)
f<- makeCacheMatrix(m)
cacheSolve(f)
version
getwd()
R.home()
Sys.getenv("PATH")
R.home()
Sys.getenv("PATH")
path.expand()
Sys.getenv()
Sys.getenv("MySQL_HOME")
install.packages('RMySQL', type = 'source')
library(MySQL)
Sys.getenv()
install.packages('RMySQL', type = 'source')
Sys.getenv()
?Sys.setenv
Sys.getenv()
Sys.getenv()
install.packages("RMySQL", type = "source")
library(RMySQL)
library("RMySQL")
Sys.getenv()
install.packages("RMySQL", type = "source")
library(RMySQL)
library(swirl)
swirl()
size_gb <- size_mb/2^10
View(cran2)
View(cran3)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
View(cran3)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, "package")
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(by_package, mean(size))
submit()
by_package
View(by_package)
View(by_package)
?n_distinct()
submit()
sumbit
submit
submit()
submit()
quit()
quit()
?connections
quit()
setwd("~/Coursera")
dir()
?formatC()
setwd("C:\Users\Dell\Documents\ISLR")
setwd("C://Users//Dell//Documents//ISLR")
getwd()
setwd("~/Coursera")
setwd("~/Documents")
setwd("C://Users//Dell//Documents")
mkdir("UMT")
?mkdir()
Library(MASS)
install.packages("MASS")
#This function is for Classification Methods LR,LDA,QDA and KNN.
#Loading Libraries
library(ISLR)
#Preparing Dataset
Smarket <- Smarket
a <- c("The year that the observation was recorded","Percentage return for previous day","Percentage return for 2 days previous","Percentage return for 3 days previous","Percentage return for 4 days previous","Percentage return for 5 days previous","Volume of shares traded (number of daily shares traded in billions)","Percentage return for today","A factor with levels Down and Up indicating whether the market had a positive or negative return on a given day")
Smarket_desc <- data.frame(cbind(colnames(Smarket),a))
colnames(Smarket_desc) <- c("variable","Variable Description")
rm(a)
#Creating Correlation matrix and identifying highly correlated variables
Smarket_cor <- cor(Smarket[,-9])
sort(Smarket_cor, decreasing = T)
which(Smarket_cor > 0.5 & Smarket_cor < 1, arr.ind = T)
colnames(Smarket_cor)[c(1,7)]
#Observing the highly correlated variables
plot(Smarket$Volume, col = "dark grey", pch = 4)
print("Volume appears to increase with time")
#Running Logistic Regression on the Dataset
glm.fit <- glm(Direction ~. -Year -Today, data = Smarket, family = binomial)
summary(glm.fit)
summary(glm.fit)$coefs
summary(glm.fit)$coef
names(summary(glm.fit))
summary(glm.fit)$coefficients
summary(glm.fit)$contrasts
contrasts(summary(glm.fit))
summary(glm.fit)
summary(glm.fit)$coefficients[,4]
summary(glm.fit)$coefficients[4,]
summary(glm.fit)$coefficients
contrasts(Direction)
contrasts(Smarket$Direction)
attach(Smarket)
?predict()
glm.fit_probs <- predict(glm.fit, type = "response")
glm.fit_probs[1:10]
predict(glm.fit)[1:10]
.rs.restartR()
library(MASS)
search()
.rs.restartR()
search()
q()
getwd()
?read.csv
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt)
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt")
y
dim(y)
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt", sep = "", header = F)
dim(y)
y[1:10]
y[1:10,]
str(y)
y <- as.factor(y)
y[,1] <- as.factor(y[,1])
str(y)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt")
X[1:5,1:5]
dim(X)
X[1:5,1
]
X[1,1]
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt", sep = "")
X[1,1]
head(X)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt", sep = "", header = F)
dim(X)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/subject_test.txt", sep = "", header = F)
dim(X)
?read.table
?data.table
>read.table
read.table
?read.table
args(read.table)
setwd("~/UMT/DataScience")
list.files()
setwd("Midterm")
list.files()
read.csv("PollingData_Imputed.csv")
PollData <- read.csv("PollingData_Imputed.csv")
dim(PollData)
str(PollData)
PollData_desc <- data.frame(colnames(PollData), c("Name of State","Election Year", "%age of people who polled Republcan - % age of people who polled Democrat", "%age of people who polled Republcan - % age of people who polled Democrat", "Number of Polls for Republican - Number of Polls for Democrat", "Number of Polls for Republicans/Total number of Polls", "1 if Republicans won state, 0 if Democrats won state"))
fix(PollData_desc)
str(PollData)
PollData$State
str(PollData)
PollData(Year)
PollData$Year
PollData[,c(State,Year)]
PollData[,1:@]
PollData[,1:2]
?split
PollData$Year <- as.factor(PollData$Year)
PollData_split <- split(PollData, PollData$Year)
length(PollData_split)
PollData_split[[1]]
Polls <- read.csv("PollingData_Imputed.csv")
dim(Polls)
str(Polls)
Polls_desc <- data.frame(colnames(Polls), c("Name of State","Election Year", "%age of people who polled Republcan - % age of people who polled Democrat", "%age of people who polled Republcan - % age of people who polled Democrat", "Number of Polls for Republican - Number of Polls for Democrat", "Number of Polls for Republicans/Total number of Polls", "1 if Republicans won state, 0 if Democrats won state"))
Polls$Year <- as.factor(Polls$Year)
Polls_split <- split(Polls, Polls$Year)
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
dim(Polls_2004)
dim(Polls_2008)
dim(Polls_2012)
summary(Polls_2004$State == Polls_2008$State)
?merge
summary(Polls_2008$State == Polls_2012$State)
Polls_2012
Polls_2012$State
Polls_2008$Statte
Polls_2008$State
(Polls_2008 %in% Polls_2012)
summary(Polls_2008$State %in% Polls_2012$State)
Polls_2008$State %in% Polls_2012$State
(Polls_2008$State %in% Polls_2012$State) == F
Polls_2008$State[!(Polls_2008$State %in% Polls_2012$State)]
Summary(Polls_2004$State == Polls_2008$State)
summary(Polls_2004$State == Polls_2008$State)
Polls_2008[!(Polls_2008$State %in% Polls_2012$State)]
Polls_2008$State[!(Polls_2008$State %in% Polls_2012$State)]
missing states <- Polls_2008$State[!(Polls_2008$State %in% Polls_2012$State)]
missing_states <- Polls_2008$State[!(Polls_2008$State %in% Polls_2012$State)]
Polls_2004$State == missing_states
Polls_2004 <- Polls_2004[!(Polls_2004$State == missing_states),]
dim(Polls_2004)
dim(Polls_2012)
missing_states
missing_states %in% Polls_2004$State
Polls_2004 <- Polls_split[[1]]
cbind(Polls_2004$State, Polls_2008$State)
Polls_2004$State == missing_states
summary(Polls_2004$State == missing_states)
missing_states == Polls_2004$State
missing_states == Polls_2008$State
Polls_2008$State %in% Polls_2012$State
!(Polls_2008$State %in% Polls_2012$State)
missing_states <- (!(Polls_2008$State %in% Polls_2012$State))
States_vector <- (!(Polls_2008$State %in% Polls_2012$State))
summary(States_vector)
States_vector <- (Polls_2008$State %in% Polls_2012$State)
summary(States_vector)
Polls_2004 <- Polls_2004[States_vector,]
Polls_2012 <- Polls_2008[States_vector,]
Colnames(Polls_2004)
colnames(Polls_2004)
?paste
colnames(Polls_2004)[3:7] <- paste("2004",(colnames(Polls_2004)[3:7]), sep = ".")
colnames(Polls_2004)
colnames(Polls_2008)[3:7] <- paste("2008",(colnames(Polls_2004)[3:7]), sep = ".")
colnames(Polls_2008)
?merge
(Polls_2004$State == Polls_2008$State == Polls_2012$State)
(Polls_2004$State == Polls_2008$State)
Polls_2012 <- Polls_2008[States_vector,]
dim(Polls_2012)
Polls_2012 <- Polls_split[[3]]
Polls_2008 <- Polls_2008[States_vector,]
(Polls_2004$State == Polls_2008$State)
(Polls_2008$State == Polls_2012$State)
Polls_2008 <- Polls_split[[2]]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2008)[3:7] <- paste("2008",(colnames(Polls_2008)[3:7]), sep = ".")
colnames(Polls_2012)[3:7] <- paste("2008",(colnames(Polls_2012)[3:7]), sep = ".")
Polls_all <- cbind(Polls_2004, (Polls_2008[3:7]),(Polls_2012[3:7]))
dim(Polls_all)
head(Polls_all,10)
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
dim(Polls_all)
head(Polls_all,10)
colnames(Polls_2012)[3:7] <- paste("2012",(colnames(Polls_2012)[3:7]), sep = ".")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
dim(Polls_all)
head(Polls_all,10)
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
Polls_2004 <- Polls_2004[States_vector,]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2004)[3:7] <- paste("2004",(colnames(Polls_2004)[3:7]), sep = ".")
colnames(Polls_2008)[3:7] <- paste("2008",(colnames(Polls_2008)[3:7]), sep = ".")
colnames(Polls_2012)[3:7] <- paste("2012",(colnames(Polls_2012)[3:7]), sep = ".")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
head(Polls_all,10)
colnames(Polls_2004)
?chisq.test
choose(14,2)
?choose
colnames(Polls_all)
?sample
train <- sample(c(T,F), size = ncol(Polls_all), replace = T, prob = c(0.7,0.3) )
summary(train)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.7,0.3) )
summary(train)
31/(31+14)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.8,0.2))
summary(train)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
set.seed(1)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
test <- (!(train))
colnames(Polls_all)
glm_fit <- glm('2012.Republican' ~ . -State, data = Polls_all, subset = train)
glm_fit <- glm(2012.Republican ~ . -State, data = Polls_all, subset = train)
glm_fit <- glm(Polls_all$2012.Republican ~ . -State, data = Polls_all, subset = train)
?glm
glm_fit <- glm("2012.Republican" ~ . -State, data = Polls_all, subset = train, family = binomial)
glm_fit <- glm(2012.Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
colnames(Polls_2004)[3:7] <- paste("2004",(colnames(Polls_2004)[3:7]), sep = "_")
colnames(Polls_2008)[3:7] <- paste("2008",(colnames(Polls_2008)[3:7]), sep = "_")
colnames(Polls_2012)[3:7] <- paste("2012",(colnames(Polls_2012)[3:7]), sep = "_")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
set.seed(1)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
test <- (!(train))
glm_fit <- glm(2012_Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
colnames(Polls_all)
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
States_vector <- (Polls_2008$State %in% Polls_2012$State)
Polls_2004 <- Polls_2004[States_vector,]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2004)[3:7] <- paste("2004",(colnames(Polls_2004)[3:7]), sep = "_")
colnames(Polls_2008)[3:7] <- paste("2008",(colnames(Polls_2008)[3:7]), sep = "_")
colnames(Polls_2012)[3:7] <- paste("2012",(colnames(Polls_2012)[3:7]), sep = "_")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
glm_fit <- glm(2012_Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
colnames(Polls_all)
formula <- "2012_Republican ~ . - State"
glm_fit <- glm(formula, data = Polls_all, subset = train, family = binomial)
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
States_vector <- (Polls_2008$State %in% Polls_2012$State)
Polls_2004 <- Polls_2004[States_vector,]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2004)[3:7] <- paste("2004",(colnames(Polls_2004)[3:7]))
colnames(Polls_2008)[3:7] <- paste("2008",(colnames(Polls_2008)[3:7]))
colnames(Polls_2012)[3:7] <- paste("2012",(colnames(Polls_2012)[3:7]))
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
colnames(Polls_all)
?paste
paste("2004","gg", collapse = T)
paste("2004","gg", collapse = "")
paste("2004","gg", sep = "l")
paste("200","gg", sep = "4")
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
States_vector <- (Polls_2008$State %in% Polls_2012$State)
Polls_2004 <- Polls_2004[States_vector,]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2004)[3:7] <- paste("200",(colnames(Polls_2004)[3:7]), sep = "4")
colnames(Polls_2008)[3:7] <- paste("200",(colnames(Polls_2008)[3:7])), sep = "8")
colnames(Polls_2012)[3:7] <- paste("201",(colnames(Polls_2012)[3:7])), sep = "2")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
set.seed(1)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
test <- (!(train))
colnames(Polls_2008)[3:7] <- paste("200",(colnames(Polls_2008)[3:7]), sep = "8")
colnames(Polls_2012)[3:7] <- paste("201",(colnames(Polls_2012)[3:7]), sep = "2")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
set.seed(1)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
test <- (!(train))
colnames(Polls_all)
glm_fit <- glm(2012Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
glm_fit <- glm(Polls_all$2012Republican ~ . -Polls_all$State, data = Polls_all, subset = train, family = binomial)
colnames(Polls_all)[16] <- "Republican"
glm_fit <- glm(Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
summary(glm_fit)
coef(glm_fit)
glm_probs <- predict(glm_fit, type = "response")
length(glm_probs)
summary(test)
?predict.glm
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
dim(Polls_all)
glm_probs <- predict(glm_fit, newdata = Polls_all[test,2:16], type = "response")
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
Polls_all$State <- as.character(Polls$State)
Polls_all$State <- as.character(Polls_all$State)
glm_fit <- glm(Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_alldata$Republican)
contrasts(Polls_all$Republican)
str(Polls_all)
Polls_all$Republican <- as.factor(Polls_all$Republican)
Polls_all[,6] <- as.factor(Polls_all[,6])
Pols_all[,11] <- as.factor(Polls_all[,11])
Polls_all[,11] <- as.factor(Polls_all[,11])
glm_fit <- glm(Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_all$Republican)
coef(glm_fit)
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
Polls_all$State <- as.character(Polls_all$State)
glm_fit <- glm(Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_all$Republican)
coef(glm_fit)
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
str(Polls_all)
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
Polls_all$State[train]
Polls_all$State[test]
glm_fit <- glm(Republican ~ ., data = Polls_all[2:16], subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_all$Republican)
Polls <- read.csv("PollingData_Imputed.csv")
Polls_desc <- data.frame(colnames(Polls), c("Name of State","Election Year", "%age of people who polled Republcan - % age of people who polled Democrat", "%age of people who polled Republcan - % age of people who polled Democrat", "Number of Polls for Republican - Number of Polls for Democrat", "Number of Polls for Republicans/Total number of Polls", "1 if Republicans won state, 0 if Democrats won state"))
Polls$Year <- as.factor(Polls$Year)
Polls_split <- split(Polls, Polls$Year)
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
States_vector <- (Polls_2008$State %in% Polls_2012$State)
Polls_2004 <- Polls_2004[States_vector,]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2004)[3:7] <- paste("200",(colnames(Polls_2004)[3:7]), sep = "4")
colnames(Polls_2008)[3:7] <- paste("200",(colnames(Polls_2008)[3:7]), sep = "8")
colnames(Polls_2012)[3:7] <- paste("201",(colnames(Polls_2012)[3:7]), sep = "2")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
set.seed(1)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
test <- (!(train))
colnames(Polls_all)[16] <- "Republican"
str(Polls_all)
str(Polls_all$State)
levels(Polls_all)
levels(Polls_all$State)
levels(Polls_all$State) == Polls_all$State
?unfactor
?factor
str(Polls_all)
Polls <- read.csv("PollingData_Imputed.csv")
str(Polls)
k <- as.character(levels(Polls$State)[Polls$State])
k
str(k)
levels(Polls$State)
levels(Polls$State)[Polls$State]
Polls$State <- as.character(levels()[Polls$State])
Polls$State <- as.character(levels(Polls$State)[Polls$State])
Polls$Year <- as.factor(Polls$Year)
Polls_split <- split(Polls, Polls$Year)
Polls_2004 <- Polls_split[[1]]
Polls_2008 <- Polls_split[[2]]
Polls_2012 <- Polls_split[[3]]
summary(Polls_2004$State == Polls_2008$State) #All match :)
States_vector <- (Polls_2008$State %in% Polls_2012$State)
States_vector
Polls_2004 <- Polls_2004[States_vector,]
Polls_2008 <- Polls_2008[States_vector,]
colnames(Polls_2004)[3:7] <- paste("200",(colnames(Polls_2004)[3:7]), sep = "4")
colnames(Polls_2008)[3:7] <- paste("200",(colnames(Polls_2008)[3:7]), sep = "8")
colnames(Polls_2012)[3:7] <- paste("201",(colnames(Polls_2012)[3:7]), sep = "2")
Polls_all <- cbind((Polls_2004[,c(1,3:7)]), (Polls_2008[3:7]),(Polls_2012[3:7]))
set.seed(1)
train <- sample(c(T,F), size = nrow(Polls_all), replace = T, prob = c(0.75,0.25))
test <- (!(train))
colnames(Polls_all)[16] <- "Republican"
Polls_all$Republican <- as.factor(Polls_all$Republican)
Polls_all[,6] <- as.factor(Polls_all[,6])
Polls_all[,11] <- as.factor(Polls_all[,11])
glm_fit <- glm(Republican ~ . - State, data = Polls_all[2:16], subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_all$Republican)
coef(glm_fit)
glm_fit <- glm(Republican ~ . -State, data = Polls_all, subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_all$Republican)
coef(glm_fit)
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
Polls_all$State
str(Polls_all$State)
str(Polls_all$State[test])
glm_probs <- predict(glm_fit, newdata = Polls_all[test,], type = "response")
str(Polls_all)
fix(Polls_all)
glm_fit <- glm(Republican ~ ., data = Polls_all[,2:16], subset = train, family = binomial)
summary(glm_fit)
contrasts(Polls_all$Republican)
coef(glm_fit)
glm_probs <- predict(glm_fit, newdata = (Polls_all[,2:16])[test,], type = "response")
glm_preds <- rep("0", length(glm_probs))
glm_preds[glm_probs >= 0.5] = "1"
summary(glm_preds)
glm_preds <- as.factor(glm_preds)
summary(glm_preds)
glm_probs
length(test)
summary(test)
Actual <- Polls_all$Republican[test]
conf <- addmargins(table(Prediction, Actual))
Prediction <- glm_preds
conf <- addmargins(table(Prediction, Actual))
conf
error <- (conf[2,1]+conf[1,2])/conf[3,3]
error
Sensitivity <- conf[2,2]/conf[2,3]
sensitivity
Sensitivity
Sensitivity <- conf[2,2]/conf[3,2]
Sensitivity
sensitivity <- conf[2,2]/conf[3,2]
TPR <- conf[2,2]/conf[3,2]
FPR <- conf[2,1]/conf[3,1]
TPR
FPR
Summary(Polls_all$Republican)
summary(Polls_all$Republican)
Sum(Polls_all$Republican == 1)
sum(Polls_all$Republican == 1)
sum(Polls_all$Republican == 1)/length(Polls_all$Republican)
conf
sum(conf[1,1]+conf[2,2]/conf[3,3])
sum(conf[1,1]+conf[2,2])/conf[3,3]
